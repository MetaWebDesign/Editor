/**
 */
package Modelouno.modeluno.provider;

import Modelouno.modeluno.util.ModelunoAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelunoItemProviderAdapterFactory extends ModelunoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelunoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Map} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapItemProvider mapItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Map}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapAdapter() {
		if (mapItemProvider == null) {
			mapItemProvider = new MapItemProvider(this);
		}

		return mapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassItemProvider classItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAdapter() {
		if (classItemProvider == null) {
			classItemProvider = new ClassItemProvider(this);
		}

		return classItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Relation_Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Relation_ClassItemProvider relation_ClassItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Relation_Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelation_ClassAdapter() {
		if (relation_ClassItemProvider == null) {
			relation_ClassItemProvider = new Relation_ClassItemProvider(this);
		}

		return relation_ClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Relation_Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Relation_AttributeItemProvider relation_AttributeItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Relation_Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelation_AttributeAdapter() {
		if (relation_AttributeItemProvider == null) {
			relation_AttributeItemProvider = new Relation_AttributeItemProvider(this);
		}

		return relation_AttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Attribute_Not_Derived} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Attribute_Not_DerivedItemProvider attribute_Not_DerivedItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Attribute_Not_Derived}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttribute_Not_DerivedAdapter() {
		if (attribute_Not_DerivedItemProvider == null) {
			attribute_Not_DerivedItemProvider = new Attribute_Not_DerivedItemProvider(this);
		}

		return attribute_Not_DerivedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Attribute_Derived} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Attribute_DerivedItemProvider attribute_DerivedItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Attribute_Derived}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttribute_DerivedAdapter() {
		if (attribute_DerivedItemProvider == null) {
			attribute_DerivedItemProvider = new Attribute_DerivedItemProvider(this);
		}

		return attribute_DerivedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Relation_Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Relation_ServiceItemProvider relation_ServiceItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Relation_Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelation_ServiceAdapter() {
		if (relation_ServiceItemProvider == null) {
			relation_ServiceItemProvider = new Relation_ServiceItemProvider(this);
		}

		return relation_ServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Create} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateItemProvider createItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Create}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateAdapter() {
		if (createItemProvider == null) {
			createItemProvider = new CreateItemProvider(this);
		}

		return createItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Delete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteItemProvider deleteItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Delete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteAdapter() {
		if (deleteItemProvider == null) {
			deleteItemProvider = new DeleteItemProvider(this);
		}

		return deleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.UpdateObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateObjectItemProvider updateObjectItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.UpdateObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateObjectAdapter() {
		if (updateObjectItemProvider == null) {
			updateObjectItemProvider = new UpdateObjectItemProvider(this);
		}

		return updateObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.UpdateAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpdateAttributeItemProvider updateAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.UpdateAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpdateAttributeAdapter() {
		if (updateAttributeItemProvider == null) {
			updateAttributeItemProvider = new UpdateAttributeItemProvider(this);
		}

		return updateAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Index} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexItemProvider indexItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Index}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexAdapter() {
		if (indexItemProvider == null) {
			indexItemProvider = new IndexItemProvider(this);
		}

		return indexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.View} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewItemProvider viewItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.View}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewAdapter() {
		if (viewItemProvider == null) {
			viewItemProvider = new ViewItemProvider(this);
		}

		return viewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Admin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdminItemProvider adminItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Admin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdminAdapter() {
		if (adminItemProvider == null) {
			adminItemProvider = new AdminItemProvider(this);
		}

		return adminItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Views} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewsItemProvider viewsItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Views}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewsAdapter() {
		if (viewsItemProvider == null) {
			viewsItemProvider = new ViewsItemProvider(this);
		}

		return viewsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.ViewInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewInputItemProvider viewInputItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.ViewInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewInputAdapter() {
		if (viewInputItemProvider == null) {
			viewInputItemProvider = new ViewInputItemProvider(this);
		}

		return viewInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.ViewUpdateObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewUpdateObjectItemProvider viewUpdateObjectItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.ViewUpdateObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewUpdateObjectAdapter() {
		if (viewUpdateObjectItemProvider == null) {
			viewUpdateObjectItemProvider = new ViewUpdateObjectItemProvider(this);
		}

		return viewUpdateObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.ViewUpdateAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewUpdateAttributeItemProvider viewUpdateAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.ViewUpdateAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewUpdateAttributeAdapter() {
		if (viewUpdateAttributeItemProvider == null) {
			viewUpdateAttributeItemProvider = new ViewUpdateAttributeItemProvider(this);
		}

		return viewUpdateAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.ViewIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewIndexItemProvider viewIndexItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.ViewIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewIndexAdapter() {
		if (viewIndexItemProvider == null) {
			viewIndexItemProvider = new ViewIndexItemProvider(this);
		}

		return viewIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.ViewAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewAttributeItemProvider viewAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.ViewAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewAttributeAdapter() {
		if (viewAttributeItemProvider == null) {
			viewAttributeItemProvider = new ViewAttributeItemProvider(this);
		}

		return viewAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.ViewAdmin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewAdminItemProvider viewAdminItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.ViewAdmin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewAdminAdapter() {
		if (viewAdminItemProvider == null) {
			viewAdminItemProvider = new ViewAdminItemProvider(this);
		}

		return viewAdminItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Relation_View} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Relation_ViewItemProvider relation_ViewItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Relation_View}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelation_ViewAdapter() {
		if (relation_ViewItemProvider == null) {
			relation_ViewItemProvider = new Relation_ViewItemProvider(this);
		}

		return relation_ViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Modelouno.modeluno.PresetationUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PresetationUnitItemProvider presetationUnitItemProvider;

	/**
	 * This creates an adapter for a {@link Modelouno.modeluno.PresetationUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPresetationUnitAdapter() {
		if (presetationUnitItemProvider == null) {
			presetationUnitItemProvider = new PresetationUnitItemProvider(this);
		}

		return presetationUnitItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mapItemProvider != null) mapItemProvider.dispose();
		if (classItemProvider != null) classItemProvider.dispose();
		if (relation_ClassItemProvider != null) relation_ClassItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (relation_AttributeItemProvider != null) relation_AttributeItemProvider.dispose();
		if (attribute_Not_DerivedItemProvider != null) attribute_Not_DerivedItemProvider.dispose();
		if (attribute_DerivedItemProvider != null) attribute_DerivedItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (relation_ServiceItemProvider != null) relation_ServiceItemProvider.dispose();
		if (createItemProvider != null) createItemProvider.dispose();
		if (deleteItemProvider != null) deleteItemProvider.dispose();
		if (updateObjectItemProvider != null) updateObjectItemProvider.dispose();
		if (updateAttributeItemProvider != null) updateAttributeItemProvider.dispose();
		if (indexItemProvider != null) indexItemProvider.dispose();
		if (viewItemProvider != null) viewItemProvider.dispose();
		if (adminItemProvider != null) adminItemProvider.dispose();
		if (viewsItemProvider != null) viewsItemProvider.dispose();
		if (viewInputItemProvider != null) viewInputItemProvider.dispose();
		if (viewUpdateObjectItemProvider != null) viewUpdateObjectItemProvider.dispose();
		if (viewUpdateAttributeItemProvider != null) viewUpdateAttributeItemProvider.dispose();
		if (viewIndexItemProvider != null) viewIndexItemProvider.dispose();
		if (viewAttributeItemProvider != null) viewAttributeItemProvider.dispose();
		if (viewAdminItemProvider != null) viewAdminItemProvider.dispose();
		if (relation_ViewItemProvider != null) relation_ViewItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (presetationUnitItemProvider != null) presetationUnitItemProvider.dispose();
	}

}
