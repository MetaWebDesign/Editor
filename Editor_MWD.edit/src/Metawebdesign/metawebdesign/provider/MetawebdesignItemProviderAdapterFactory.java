/**
 */
package Metawebdesign.metawebdesign.provider;

import Metawebdesign.metawebdesign.util.MetawebdesignAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetawebdesignItemProviderAdapterFactory extends MetawebdesignAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetawebdesignItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Root} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Root}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new RootItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassItemProvider classItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAdapter() {
		if (classItemProvider == null) {
			classItemProvider = new ClassItemProvider(this);
		}

		return classItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Attributes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributesItemProvider attributesItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Attributes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributesAdapter() {
		if (attributesItemProvider == null) {
			attributesItemProvider = new AttributesItemProvider(this);
		}

		return attributesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Derived} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedItemProvider derivedItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Derived}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedAdapter() {
		if (derivedItemProvider == null) {
			derivedItemProvider = new DerivedItemProvider(this);
		}

		return derivedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.NotDerived} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotDerivedItemProvider notDerivedItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.NotDerived}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotDerivedAdapter() {
		if (notDerivedItemProvider == null) {
			notDerivedItemProvider = new NotDerivedItemProvider(this);
		}

		return notDerivedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.RelationClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationClassItemProvider relationClassItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.RelationClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationClassAdapter() {
		if (relationClassItemProvider == null) {
			relationClassItemProvider = new RelationClassItemProvider(this);
		}

		return relationClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Menu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemProvider menuItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Menu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuAdapter() {
		if (menuItemProvider == null) {
			menuItemProvider = new MenuItemProvider(this);
		}

		return menuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Views} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewsItemProvider viewsItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Views}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewsAdapter() {
		if (viewsItemProvider == null) {
			viewsItemProvider = new ViewsItemProvider(this);
		}

		return viewsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.RelationView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationViewItemProvider relationViewItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.RelationView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationViewAdapter() {
		if (relationViewItemProvider == null) {
			relationViewItemProvider = new RelationViewItemProvider(this);
		}

		return relationViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.ViewComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewComponentItemProvider viewComponentItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.ViewComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewComponentAdapter() {
		if (viewComponentItemProvider == null) {
			viewComponentItemProvider = new ViewComponentItemProvider(this);
		}

		return viewComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.CallAtribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallAtributeItemProvider callAtributeItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.CallAtribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallAtributeAdapter() {
		if (callAtributeItemProvider == null) {
			callAtributeItemProvider = new CallAtributeItemProvider(this);
		}

		return callAtributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.NavegationMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavegationMenuItemProvider navegationMenuItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.NavegationMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavegationMenuAdapter() {
		if (navegationMenuItemProvider == null) {
			navegationMenuItemProvider = new NavegationMenuItemProvider(this);
		}

		return navegationMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.LinkViewCRUD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkViewCRUDItemProvider linkViewCRUDItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.LinkViewCRUD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkViewCRUDAdapter() {
		if (linkViewCRUDItemProvider == null) {
			linkViewCRUDItemProvider = new LinkViewCRUDItemProvider(this);
		}

		return linkViewCRUDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.LinkView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkViewItemProvider linkViewItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.LinkView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkViewAdapter() {
		if (linkViewItemProvider == null) {
			linkViewItemProvider = new LinkViewItemProvider(this);
		}

		return linkViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Metawebdesign.metawebdesign.RelationContraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationContraintItemProvider relationContraintItemProvider;

	/**
	 * This creates an adapter for a {@link Metawebdesign.metawebdesign.RelationContraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationContraintAdapter() {
		if (relationContraintItemProvider == null) {
			relationContraintItemProvider = new RelationContraintItemProvider(this);
		}

		return relationContraintItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rootItemProvider != null) rootItemProvider.dispose();
		if (classItemProvider != null) classItemProvider.dispose();
		if (attributesItemProvider != null) attributesItemProvider.dispose();
		if (derivedItemProvider != null) derivedItemProvider.dispose();
		if (notDerivedItemProvider != null) notDerivedItemProvider.dispose();
		if (relationClassItemProvider != null) relationClassItemProvider.dispose();
		if (menuItemProvider != null) menuItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (viewsItemProvider != null) viewsItemProvider.dispose();
		if (formItemProvider != null) formItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (relationViewItemProvider != null) relationViewItemProvider.dispose();
		if (viewComponentItemProvider != null) viewComponentItemProvider.dispose();
		if (callAtributeItemProvider != null) callAtributeItemProvider.dispose();
		if (navegationMenuItemProvider != null) navegationMenuItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (linkViewCRUDItemProvider != null) linkViewCRUDItemProvider.dispose();
		if (linkViewItemProvider != null) linkViewItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (relationContraintItemProvider != null) relationContraintItemProvider.dispose();
	}

}
